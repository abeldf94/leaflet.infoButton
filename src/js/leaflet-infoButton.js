require('../css/leaflet-infoButton.css'); // Webpack hook

(function (L) {
  if ("function" === typeof define && define.amd) {
    define(["leaflet"], L);
  } else if ("undefined" !== typeof module) {
    module.exports = L(require("leaflet"));
  } else {
    if ("undefined" === typeof this.L) {
      throw "Leaflet must be loaded first!";
    }
    L(this.L);
  }
})(function (L) {
  L.Control.InfoButton = L.Control.extend({
    options: {
      position: "topleft",
      title: "<h1>Title</h1>",
      buttonTittle: "About",
      html: '<p>This map was generated by Leaflet.</p>',
      show: false,
      minWidth: 500
    },
    onAdd: function (map) {
      this.disable = false;
      this.container = L.DomUtil.create("div", "info-control");
      this.info = L.DomUtil.create("div", "leaflet-info-control", this.container);
      this.info.title = this.options.buttonTittle;
      this.info.innerHTML = '<i class="fa fa-info-circle"></i>';
      this.infoWindowContainer = L.DomUtil.create("div", "leaflet-info-window-container", map._container);
      this.infoWindow = L.DomUtil.create("div", "leaflet-info-window", this.infoWindowContainer);
      this.title = L.DomUtil.create("div", "leaflet-title", this.infoWindow);
      this.title.innerHTML = this.options.title;
      this.content = L.DomUtil.create("div", "leaflet-content", this.infoWindow);
      this.content.innerHTML = this.options.html;
      this.options.show && this._showInfo();

      L.DomEvent.on(this.info, 'click', this._click, this);
      L.DomEvent.on(this.infoWindowContainer, 'click', this._click, this);
      L.DomEvent.disableClickPropagation(this.infoWindowContainer);
      L.DomEvent.disableScrollPropagation(this.infoWindowContainer);

      L.DomEvent.on(this.info, 'click', function () {
        const width = Math.max(
          document.documentElement["clientWidth"],
          document.body["scrollWidth"],
          document.documentElement["scrollWidth"],
          document.body["offsetWidth"],
          document.documentElement["offsetWidth"]
        );

        if (this.options.minWidth > width) {
          Array.from(document.getElementsByClassName("leaflet-top leaflet-right")).forEach(element => {
            (element.style.display !== "none") && (element.style.display = "none");
          });
          Array.from(document.getElementsByClassName("leaflet-top leaflet-left")).forEach(element => {
            (element.style.display !== "none") && (element.style.display = "none")
          });
        }
      }, this);

      L.DomEvent.on(this.infoWindowContainer, 'click', function () {
        Array.from(document.getElementsByClassName("leaflet-top leaflet-right")).forEach(element => {
          (element.style.display === "none") && (element.style.display = "block");
        });
        Array.from(document.getElementsByClassName("leaflet-top leaflet-left")).forEach(element => {
          (element.style.display === "none") && (element.style.display = "block")
        });
      });

      return this.container;
    },
    _click: function () {
      this.disable || (this.options.show ? (this.disable = !0, this._hideInfo()) : this._showInfo(), this.options.show = !this.options.show)
    },
    _showInfo: function () {
      this.infoWindowContainer.style.display = "block";
      this.infoWindow.style.animation = "showInfo 0.5s";
      this.infoWindow.style.webkitAnimationName = "showInfo 0.5s";
      this.infoWindow.style.top = "10%";
    },
    _hideInfo: function () {
      this.infoWindow.style.animation = "hideInfo 0.5s";
      this.infoWindow.style.webkitAnimationName = "hideInfo 0.5s";
      this.infoWindow.style.top = "-100%";

      let _this = this;
      setTimeout(function () {
        _this.infoWindowContainer.style.display = "none";
        _this.disable = false;
      }, 500);
    }
  });

  L.control.infoButton = function (options) {
    return new L.Control.InfoButton(options)
  };
});